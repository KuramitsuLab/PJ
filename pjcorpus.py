

FUNCDATA = {
    'print': {
        'stem': '表示する',
        0: '空行を',
        1: '{}を',
        'end=': '{}を行末として',
        'end=""': '改行なしで',
        'seq=': '{}を区切り文字列として',
    },
    'input': {
        0: '入力された文字列',
        1: '{}に対して入力された文字列',
    },
    '.split': {
        1: '{}を空白で分割した文字列リスト',
        2: '{}を{}で分割した文字列リスト',
    },
    'map': {
        2: '{1}の各々に{0}を適用したリスト',
    },
    'abs': { 1: '{}の絶対値', },
    'all': { 1: '{}の全てが真か', },
    'any': { 1: '{}のひとつ以上が真か', },
    'ascii': {},
    'bin': { 1: '{}の2進数文字列', },
    'bool': {},
    'breakpoint': {},
    'bytearray': {},
    'bytes': {},
    'callable': {},
    'chr': { 1: '文字コード{}の文字', },
    'classmethod': {},
    'compile': {},
    'complex': { 1: '{}の複素数', 2: '{}を実部、{}を虚部とした複素数', },
    'delattr': {},
    'dict': {},
    'dir': {},
    'divmod': { 2: '{}と{}の商と剰余のペア', },
    'enumerate': { 1: '{}に番号をつける', },   # enumerate(iterable, start=0)
    'eval': { 1: '{}を評価した値', },   # eval(expression[, globals[, locals]])
    'exec': {},
    'filter': {},
    'float': { 1: '{}を実数にした値', },
    'format': { 1: '{}をフォーマットした文字列'},   # format(value[, format_spec])
    'frozenset': {},
    'getattr': {},
    'globals': {},
    'hasattr': {},
    'hash': {},
    'help': {},
    'hex': {},
    'id': {},
    'int': { 1: '{}の整数値', },
    'isinstance': { 2: '{}は{}型か', },
    'issubclass': {},
    'iter': {},
    'len': { 1: '{}の長さ', },
    'list': { 0: '空のリスト', 1: '{}のリスト', },
    'locals': {},
    'max': { 1: '{}の最大値', },
    'memoryview': {},
    'min': { 1: '{}の最小値', },
    'next': {},
    'object': {},
    'oct': {},
    'open': { 1: 'ファイル{}を開く', },   # open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
    'ord': { 1: '{}の順序', },   # ???
    'pow': { 2: '{}の{}乗', 3: '{}の{}乗に対する{}の剰余', },
    'property': {},
    'repr': {},
    'reversed': { 1: '{}を反転した列', },
    'round': {},
    'set': { 0: '空の集合', 1: '{}の集合', },
    'setattr': {},
    'slice': {},
    'sorted': { 1: '{}をソートした結果', },   # sorted(iterable, *, key=None, reverse=False)
    'staticmethod': {},
    'str': { 1: '{}の文字列', },
    'sum': { 1: '{}の総和', },   # sum(iterable, /, start=0)
    'super': {},
    'tuple': { 1: '{}をタプルにする', },
    'type': {},
    'vars': {},
    'zip': { 1: '{}をジップした列', },
    '__import__': {},
    'range': {
        1: '0から{}未満までの数列',
        2: '{}から{}未満までの数列',
        3: '{}から{}未満までの{}間隔の数列',
    },
    '+': { 2: '{}に{}を加えた値',},
    '-': { 1: '-{}', 2: '{}から{}を引いた値', },
    '*': { 1: '{}を引数として展開して', 2: '{}に{}を掛けた値', },
    '/': { 2: '{}を{}で割った値', },
    '//': { 2: '{}を{}で割った商', },
    '%': { 2: '{}を{}で割った余り', },
    '**': { 2: '{}を{}乗した値',},
    '+=': { 2: '{}を{}だけ増加させる', },
    '-=': { 2: '{}を{}だけ減少させる', },
    '*=': { 2: '{}を{}倍にする', },
    '/=': { 2: '{}を{}分の一にする', },
    '//=': { 2: '{}を{}分の一にする', },
    '%=': { 2: '{}を{}で割った余りにする', },
    '==': { 2: '{}と{}が等しいか', },
    '!=': { 2: '{}と{}が等しくないか', },
    '<': { 2: '{}が{}より小さいか', },
    '<=': { 2: '{}が{}以下', },
    '>': { 2: '{}が{}より大きいか', },
    '>=': { 2: '{}が{}以上', },
    'in': { 2: '{}が{}に含まれるか', },

    'range': {1: '0から{}までの数列'},
    'random.random': {0: '0.0から1.0までの乱数'},
    # vocabulary
    'counter': {'name': 'カウンタ'},
}


def get_corpus(name, base=''):
    return FUNCDATA[name] if name in FUNCDATA else {}